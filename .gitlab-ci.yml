stages:
    - test
    - lint
    - docs
    - collect
    - deploy

### Debian ###
test:debian:static:
    image: volcart/vcbuilder-debian:9_v7.static
    stage: test
    script:
        - echo $CI_BUILD_REF_NAME   $CI_BUILD_STAGE
        - mkdir -p build
        - cd build/
        - cmake -DVC_USE_ACVD=ON -GNinja ..
        - ninja
        - ctest -V
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - build/Testing/Temporary/
        when: always
        expire_in: 4 weeks
    tags:
        - docker

test:debian:dynamic:
    image: volcart/vcbuilder-debian:9_v7.dynamic
    stage: test
    script:
        - echo $CI_BUILD_REF_NAME   $CI_BUILD_STAGE
        - mkdir -p build
        - cd build/
        - cmake -DVC_USE_ACVD=ON -GNinja ..
        - ninja
        - ctest -V
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - build/Testing/Temporary/
        when: always
        expire_in: 4 weeks
    tags:
        - docker

test:debian:experimental:
    image: volcart/vcbuilder-debian:9_v7.experimental
    stage: test
    script:
        - echo $CI_BUILD_REF_NAME   $CI_BUILD_STAGE
        - mkdir -p build
        - cd build/
        - cmake -DVC_BUILD_EXPERIMENTAL=ON -DVC_USE_ACVD=ON -GNinja ..
        - ninja
        - ctest -V
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - build/Testing/Temporary/
        when: always
        expire_in: 4 weeks
    tags:
        - docker

### macOS ###
test:macos:static:
    stage: test
    script:
        - echo $CI_BUILD_REF_NAME   $CI_BUILD_STAGE
        - mkdir -p build
        - cd build/
        - cmake -DQt5_DIR=/usr/local/opt/qt5/lib/cmake/Qt5 -DVC_USE_ACVD=ON -GNinja ..
        - ninja
        - ctest -V
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - build/testing/Temporary/
        when: always
        expire_in: 4 weeks
    tags:
        - test
        - osx
        - homebrew
        - qt5
        - ninja

test:macos:dynamic:
    stage: test
    script:
        - echo $CI_BUILD_REF_NAME   $CI_BUILD_STAGE
        - mkdir -p build
        - cd build/
        - cmake -DQt5_DIR=/usr/local/opt/qt5/lib/cmake/Qt5 -DVC_USE_ACVD=ON -DBUILD_SHARED_LIBS=ON -GNinja ..
        - ninja
        - ctest -V
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - build/testing/Temporary/
        when: always
        expire_in: 4 weeks
    tags:
        - test
        - osx
        - homebrew
        - qt5
        - ninja

### Extra Checks and Tests ###
lint:clang-format:
    before_script:
      - git fetch --all
    stage: lint
    script:
        - scripts/clang-format.py --print-output
    allow_failure: true
    tags:
        - clang-format
        - osx

lint:clang-tidy:
    before_script:
      - git fetch --all
      - mkdir -p build/
      - cd build/
      - cmake -DQt5_DIR=/usr/local/opt/qt5/lib/cmake/qt5/ -GNinja -DVC_USE_ACVD=ON ..
      - cd ..
    stage: lint
    script:
        - echo $CI_BUILD_REF_NAME $CI_BUILD_STAGE
        - scripts/clang-tidy.py --print-output
    allow_failure: true
    tags:
        - clang-tidy
        - osx

### Documentation ###
doxygen:
    only:
        - master
        - develop
    stage: docs
    script:
        - cd build/
        - cmake -DQt5_DIR=/usr/local/opt/qt5/lib/cmake/qt5/ -DVC_BUILD_DOC=ON -GNinja ..
        - ninja doc
        - cd doc/latex/
        - make
    artifacts:
        name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
        paths:
            - build/doc/html/*
            - build/doc/latex/*.pdf
        expire_in: 5 days
    allow_failure: true
    tags:
        - doxy
        - test

### Collect & Deploy ###
collect:release:source:
    only:
        - master
    stage: collect
    script:
        - version=$(utils/scripts/version-gen.sh)
        - vershort=$(utils/scripts/version-gen.sh --short)
        - git archive --format=tar.gz -o VC-${vershort}-source.tar.gz HEAD
    artifacts:
      name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
      paths:
         - ./*.tar.gz
      expire_in: 1 day
    tags:
      - source

collect:release:macos:
    only:
        - master
    stage: collect
    variables:
        OSX_SDK_VERSION: "10.9"
        OSX_SDK_PATH: "../vc-deps/build/osx-sdk-prefix/src/osx-sdk/SDKs/MacOSX10.9.sdk/"
    script:
        - git submodule update --init
        - cd vc-deps/
        - mkdir -p build/
        - cd build/
        - cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_UNIVERSAL_LIBS=ON ..
        - ninja
        - cd ../..
        - mkdir -p build
        - cd build/
        - cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DVC_PREBUILT_LIBS=ON -DVC_USE_ACVD=ON -DVC_BUILD_EXAMPLES=OFF -DVC_BUILD_TESTS=OFF -DQt5_DIR=/usr/local/opt/qt5/lib/cmake/Qt5 -DCMAKE_OSX_DEPLOYMENT_TARGET=$OSX_SDK_VERSION -DCMAKE_OSX_SYSROOT=$OSX_SDK_PATH ..
        - ninja
        - ninja package
        - mv VC*.dmg ../
        - mv VC*.tar.gz ../
    artifacts:
      name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
      paths:
        - ./*.dmg
        - ./*.tar.gz
      expire_in: 1 day
    tags:
        - deploy
        - osx
        - qt5

collect:nightly:source:
    only:
        - schedules
    except:
        - /(?!develop)$/i
    stage: collect
    script:
        - datetime=$(date '+%Y%m%d')
        - vershort=$(utils/scripts/version-gen.sh --short)
        - sha=$(git log -1 --format="%h")
        - git archive --format=tar.gz -o VC-${datetime}-${vershort}.${sha}-source.tar.gz HEAD
    artifacts:
      name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
      paths:
         - ./*.tar.gz
      expire_in: 1 day
    tags:
      - source

collect:nightly:macos:
    only:
        - schedules
    except:
        - /(?!develop)$/i
    stage: collect
    variables:
        OSX_SDK_VERSION: "10.9"
        OSX_SDK_PATH: "../vc-deps/build/osx-sdk-prefix/src/osx-sdk/SDKs/MacOSX10.9.sdk/"
    script:
        - git submodule update --init
        - cd vc-deps/
        - mkdir -p build/
        - cd build/
        - cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DBUILD_UNIVERSAL_LIBS=ON ..
        - ninja
        - cd ../..
        - mkdir -p build
        - cd build/
        - cmake -GNinja -DCMAKE_BUILD_TYPE=Release -DVC_VERSION_DATESTAMP=ON -DVC_PREBUILT_LIBS=ON -DVC_USE_ACVD=ON -DVC_BUILD_EXAMPLES=OFF -DVC_BUILD_TESTS=OFF -DQt5_DIR=/usr/local/opt/qt5/lib/cmake/Qt5 -DCMAKE_OSX_DEPLOYMENT_TARGET=$OSX_SDK_VERSION -DCMAKE_OSX_SYSROOT=$OSX_SDK_PATH ..
        - ninja
        - ninja package
        - mv VC*.dmg ../
        - mv VC*.tar.gz ../
    artifacts:
      name: "${CI_BUILD_STAGE}_${CI_BUILD_REF_NAME}"
      paths:
        - ./*.dmg
        - ./*.tar.gz
      expire_in: 1 day
    tags:
        - deploy
        - osx
        - qt5

deploy:release:
    only:
        - master
    stage: deploy
    dependencies:
      - collect:release:source
      - collect:release:macos
    script:
        - directory=v$(utils/scripts/version-gen.sh)
        - mkdir -p ${directory}
        - cp VC*.dmg ${directory}
        - cp VC*.tar.gz ${directory}
        - rclone -v copy ${directory}/ volume-cartographer:releases/${directory}/
    environment: production
    tags:
        - rclone

deploy:nightly:
    only:
        - schedules
    except:
        - /(?!develop)$/i
    stage: deploy
    dependencies:
      - collect:nightly:source
      - collect:nightly:macos
    script:
        - datetime=$(date '+%Y%m%d')
        - vershort=$(utils/scripts/version-gen.sh --short)
        - sha=$(git log -1 --format="%h")
        - directory=${datetime}-${vershort}.${sha}
        - mkdir -p ${directory}
        - cp VC*.dmg ${directory}
        - cp VC*.tar.gz ${directory}
        - rclone -v copy ${directory}/ volume-cartographer:nightlies/${directory}/
    environment: development
    tags:
        - rclone
